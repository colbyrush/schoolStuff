/*
     Computer Graphics Assignment 6

     File        -- Assign5.cpp
     Date        -- 5/9/2014
     Author      -- Colby Rush

     Partially based off Nate Miller's cube tutorial in code and format.
*/


#include <stdio.h>
#include <GL/freeglut.h>
#include <math.h>

/*
     This is my vertex structure
     0 = x, 1 = y, 2 = Z
*/
typedef float vec3_t[3];
void drawString (void * font, char *s, float x, float y, float z);

/* Window width and height */
int winW = 640;
int winH = 640;
/* Rendering state variables */
int aniOn = 0;
int fillOn = 1;

/* Colors for our cube */
vec3_t colors[] =
{
	 //red
     {1.0f, 0.0f, 0.0f},
	 {1.0f, 0.0f, 0.0f},
	 {1.0f, 0.0f, 0.0f},
	 {1.0f, 0.0f, 0.0f},
	 
	 //green
	 {0.0f, 1.0f, 0.0f},
	 {0.0f, 1.0f, 0.0f},
	 {0.0f, 1.0f, 0.0f},
	 {0.0f, 1.0f, 0.0f},

	 //blue
	 {0.0f, 0.0f, 1.0f},
	 {0.0f, 0.0f, 1.0f},
	 {0.0f, 0.0f, 1.0f},
	 {0.0f, 0.0f, 1.0f},

	 //white
	 {1.0f, 1.0f, 1.0f},
	 {1.0f, 1.0f, 1.0f},
	 {1.0f, 1.0f, 1.0f},
	 {1.0f, 1.0f, 1.0f},
	 
	 //yellow
	 {1.0f, 1.0f, 0.0f},
	 {1.0f, 1.0f, 0.0f},
	 {1.0f, 1.0f, 0.0f},
	 {1.0f, 1.0f, 0.0f},

	 //orange
	 {1.0f, 0.5f, 0.0f},
	 {1.0f, 0.5f, 0.0f},
	 {1.0f, 0.5f, 0.0f},
	 {1.0f, 0.5f, 0.0f},


};
/* Amount to rotate */
vec3_t rot = {0,50,0}; //edited a bit to make it easier to screenshot
vec3_t eye = {0,0,5}; //edited to zoom in on shape

/* Position of our eye or camera */

void drawString (void * font, char *s, float x, float y, float z) //handles text requests
{
     unsigned int i;
     glRasterPos3f(x, y, z);

     for (i = 0; i < strlen (s); i++)
          glutBitmapCharacter (font, s[i]);
}

void setChrome() //materials functions to make swapping easy
{
	GLfloat mat_ambi[] = { 0.25, 0.25, 0.25};
	GLfloat mat_diff[] = { 0.4, 0.4, 0.4};
	GLfloat mat_spec[] = { 0.774597, 0.774597, 0.774597};
    GLfloat mat_shin[] = { 76.8 };

	glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambi);
    glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diff);
    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_spec);
    glMaterialfv(GL_FRONT, GL_SHININESS, mat_shin);
}

void setGold()
{
	GLfloat mat_ambi[] = { 0.24725, 0.1995, 0.0745};
	GLfloat mat_diff[] = { 0.75164, 0.60648, 0.22648};
	GLfloat mat_spec[] = { 0.628281, 0.555802, 0.366065};
    GLfloat mat_shin[] = { 51.2 };

	glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambi);
    glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diff);
    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_spec);
    glMaterialfv(GL_FRONT, GL_SHININESS, mat_shin);
}

void setSilver()
{
	GLfloat mat_ambi[] = { 0.19225, 0.19225, 0.19225};
	GLfloat mat_diff[] = { 0.50754, 0.50754, 0.50754};
	GLfloat mat_spec[] = { 0.508273, 0.508273, 0.508273};
    GLfloat mat_shin[] = { 51.2 };

	glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambi);
    glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diff);
    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_spec);
    glMaterialfv(GL_FRONT, GL_SHININESS, mat_shin);
}

void setPSilver()
{
	GLfloat mat_ambi[] = { 0.23125, 0.23125, 0.23125};
	GLfloat mat_diff[] = { 0.2775, 0.2775, 0.2775};
	GLfloat mat_spec[] = { 0.773911, 0.773911, 0.773911};
    GLfloat mat_shin[] = { 89.6 };

	glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambi);
    glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diff);
    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_spec);
    glMaterialfv(GL_FRONT, GL_SHININESS, mat_shin);
}

void light() //turns on and sets lights to colors
{
GLfloat light_ambient[] = { 0.0, 0.0, 0.0, 1.0 };
GLfloat lightr_diffuse[] = { 1.0, 0.0, 1.0, 1.0 };
GLfloat lightg_diffuse[] = { 0.0, 1.0, 0.0, 1.0 };
GLfloat lightb_diffuse[] = { 0.0, 0.0, 0.0, 1.0 };
GLfloat light_specular[] = { 1.0, 1.0, 1.0, 1.0 };
GLfloat lightr_position[] = { 10.0, 1.0, 1.0, 0.0 };
GLfloat lightg_position[] = { 0.0, 1.0, 1.0, 0.0 };
GLfloat lightb_position[] = { -10.0, 1.0, 1.0, 0.0 };

glLightfv(GL_LIGHT0, GL_AMBIENT, light_ambient);
glLightfv(GL_LIGHT0, GL_DIFFUSE, lightr_diffuse);
glLightfv(GL_LIGHT0, GL_SPECULAR, light_specular);
glLightfv(GL_LIGHT0, GL_POSITION, lightr_position);

glLightfv(GL_LIGHT1, GL_DIFFUSE, lightg_diffuse);
glLightfv(GL_LIGHT1, GL_AMBIENT, light_ambient);
glLightfv(GL_LIGHT1, GL_SPECULAR, light_specular);
glLightfv(GL_LIGHT1, GL_POSITION, lightg_position);

glLightfv(GL_LIGHT2, GL_POSITION, lightb_position);
glLightfv(GL_LIGHT2, GL_SPECULAR, light_specular);
glLightfv(GL_LIGHT2, GL_AMBIENT, light_ambient);
glLightfv(GL_LIGHT2, GL_DIFFUSE, lightb_diffuse);
}

double convert(double x, double y) //converts x and y to rad and theta to use for z
{
	double rad, theta, z;

	rad = sqrt(x*x + y*y);
	theta = atan(y/x);
	z = (3*pow(2.71828182845904523536, -pow(rad,2)))*(sin(6.28318*rad) - ((rad)*cos(3*(theta))));
	return z;

}

void drawModel(void) //draws 3D function
{
	double x,y = 0;

	glBegin(GL_QUADS);
	for(x = -2; x <= 2; x+=.02)
		for(y = -2; y <= 2; y+=.05)
		{
			if (sqrt(x*x + y*y) <=2 ) // if ever smaller than 2, doesn't fit in our range
			{
				if (y < 0 && x < 0) //section division
					setSilver();
				if (y < 0 && x > 0)
					setGold();
				if (y > 0 && x < 0)
					setPSilver();
				if (y > 0 && x > 0)
					setChrome();
			glVertex3d(x, y, convert(x,y));
			glVertex3d(x + 0.1, y, convert(x + 0.1, y));
			}
		}
	glEnd();

}

void drawName()
{
	glColor3f(1.0,1.0,1.0);
    drawString(GLUT_BITMAP_HELVETICA_18, "Colby Rush - CS 324 Assignment 6", 0, 0, 0); 
}

/*
=============
glutDisplay
=============

Our main display function.  This will clear the color and depth buffers.  After
that it will translate the world to our eye position and rotate it by the
rotation amounts.  Finally the shape is drawn and the buffers are swapped.
*/
void glutDisplay( void ) 
{
     glClear( GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT );

     glMatrixMode( GL_MODELVIEW );
     glLoadIdentity();

     glTranslatef( -eye[0], -eye[1], -eye[2] );

     glRotatef( rot[0], 1.0f, 0.0f, 0.0f );
     glRotatef( rot[1], 0.0f, 1.0f, 0.0f );
     glRotatef( rot[2], 0.0f, 0.0f, 1.0f );

	 drawModel();   

	 drawName();

     glutSwapBuffers();
}
/*
=============
clamp
=============

Used to keep the rotations in the range of -360 to 360
*/
void clamp( vec3_t p )
{
     int i;

     for (i = 0; i < 3; i ++)
         if (p[i] >= 360 || p[i] < -360)
             p[i] = 0;
}
/*
=============
glutIdle
=============

The idle function that animates our function.  Advances the rotation variables.
*/
void glutIdle(void)
{
     if (aniOn)
     {
         rot[0] += 0.7f;
         rot[1] += 0.5f;
         rot[2] += 0.3f;

         clamp(rot);
         glutPostRedisplay();
     }
}
/*
=============
glutResize
=============

Called when the application starts by default and when the window is resized.
When called the winW and winH are updated.  Then the depth and color buffers
are cleared and a viewing projection is established.  The viewing projection
needs to be set only when the width and height of the window change.
*/
void glutResize (int w, int h)
{
     if (!h)
        return;

     winW = w;
     winH = h;

     glClear( GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT );
     glViewport( 0, 0, winW, winH );

     glMatrixMode( GL_PROJECTION );
     glLoadIdentity();

     gluPerspective( 90, winW / winH, 1, 9999 );

     glutPostRedisplay();
}
/*
=============
glutKeyboard
=============

Handles keyboard input.
*/
void glutKeyboard( unsigned char key, int x, int y )
{
     switch (key)
     {
     case ' ':
             aniOn = !aniOn;
             break;
     case 'f':
     case 'F':
             fillOn = !fillOn;

             if (fillOn)
                 glPolygonMode(GL_FRONT_AND_BACK, GL_FILL );
             else
                 glPolygonMode( GL_FRONT_AND_BACK, GL_LINE );

             glutPostRedisplay();

             break;
     case 'h':
     case 'H':
             printf("Space Bar -- On/Off Animation\n");
             printf("f         -- On/Off Wireframe\n");
             break;

     }
}
/*
=============
glInit
=============

Sets up depth test and tells opengl to fill our polys.
*/
void glInit(void)
{

   glClearColor (0.0, 0.0, 0.0, 0.0);
   glShadeModel (GL_SMOOTH);

   
   glEnable(GL_LIGHTING); //turns on lights
   glEnable(GL_LIGHT0);
   glEnable(GL_LIGHT1);
   glEnable(GL_LIGHT2);
   glEnable( GL_DEPTH_TEST );
   glPolygonMode( GL_FRONT_AND_BACK, GL_FILL );
}

int main( int argc, char** argv )
{
     glutInit( &argc, argv ); 

     glutInitDisplayMode( GLUT_RGB | GLUT_DOUBLE | GLUT_DEPTH );
     glutInitWindowSize( winW, winH );

     glutCreateWindow( "Assignment 6" ); 
     glutDisplayFunc( glutDisplay );
     glutReshapeFunc( glutResize );
     glutIdleFunc( glutIdle );
     glutKeyboardFunc( glutKeyboard );

     glInit();
	 light(); //enables light settings
     glutMainLoop();

     return 0;
}